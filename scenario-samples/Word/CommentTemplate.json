{
  "Templates": [
    {
      "Description": "Insert comment ( commentary ), edit comment content, reply to a comment, resolve a comment, get the comments and delete a comment.",
      "SampleCodes": "async function insertComment() {\n  // Adds a comment on the selected content.\n  await Word.run(async (context) => {\n    const text = \"comment content\"; // Replaces by your own comment.\n    const comment = context.document.getSelection().insertComment(text);\n    // Load object to access the properties\n    comment.load(\"id, authorEmail, authorName, content, creationDate, resolved, replies\");\n    await context.sync();C\n    console.log(\"Comment inserted:\");\n    console.log(comment);\n  });\n}\n\nasync function editFirstCommentInSelection() {\n  // Edits the first comment in the selected content.\n  await Word.run(async (context) => {\n    const text = \"comment content\"; // Replaces by your own comment.\n    const comment = context.document\n      .getSelection()\n      .getComments()\n      .getFirst();\n    comment.content = text; // update the content of the comment\n    // Load object to access the properties\n    comment.load();\n    await context.sync();\n    console.log(\"Comment content changed:\");\n    console.log(comment);\n  });\n}\n\nasync function replyToFirstActiveCommentInSelection() {\n  // Replies to the first active comment in the selected content.\n  await Word.run(async (context) => {\n    const text = \"comment reply\"; // Replaces by your own comment reply.\n    const comments = context.document.getSelection().getComments();\n    comments.load(\"items\");\n    await context.sync();\n    const firstActiveComment = comments.items.find((item) => item.resolved !== true);\n    if (firstActiveComment) {\n      const reply = firstActiveComment.reply(text); // add a reply to the comment\n      console.log(\"Reply added\");\n    } else {\n      console.log(\"No active comment was found in the selection so couldn't reply.\");\n    }\n  });\n}\n\nasync function toggleResolvedStatusOfFirstCommentInSelection() {\n  // Toggles Resolved status of the first comment in the selected content.\n  await Word.run(async (context) => {\n    const comment = context.document\n      .getSelection()\n      .getComments()\n      .getFirst();\n    comment.load(\"resolved\");\n    await context.sync();\n\n    // Toggle resolved status.\n    // If the comment is active, set as resolved.\n    // If it's resolved, set resolved to false.\n    const toggleResolved: boolean = comment.resolved;\n    comment.resolved = !toggleResolved;\n    comment.load();\n    await context.sync();\n    console.log(`Comment Resolved status: ${comment.resolved}`);\n    console.log(comment);\n  });\n}\n\nasync function getFirstCommentRange() {\n  // Gets the range of the first comment in the selected content.\n  await Word.run(async (context) => {\n    const range = context.document\n      .getSelection()\n      .getComments()\n      .getFirst()\n      .getRange();\n    range.load(\"text\");\n    await context.sync();\n    console.log(`Comment location: ${range.text}`);\n  });\n}\n\nasync function getCommentsInSelection() {\n  // Gets the comments in the selected content.\n  await Word.run(async (context) => {\n    const comments = context.document.getSelection().getComments();\n\n    // Load objects to access the properties\n    comments.load(\"id, authorEmail, authorName, content, creationDate, resolved, replies\");\n    await context.sync();\n    console.log(comments);\n  });\n}\n\nasync function deleteFirstCommentInSelection() {\n  // Deletes the first comment in the selected content.\n  await Word.run(async (context) => {\n    context.document\n      .getSelection()\n      .getComments()\n      .getFirst()\n      .delete();\n    await context.sync();\n  });\n}\n\nasync function getComments() {\n  // Gets the comments in the document body.\n  await Word.run(async (context) => {\n    const comments = context.document.body.getComments();\n    // Load objects to access the properties\n    comments.load();\n    await context.sync();\n    console.log(comments);\n  });\n}"
    }
  ]
}