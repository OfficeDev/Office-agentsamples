{
	"Templates": [
		{
			"Description": "Inserts, updates, retrieves and deletes content controls. Registers, triggers and deregisters event that tracks content controls.",
			"SampleCodes": "enum ContentControlType {\n  unknown = 0,\n  richTextInline = 1,\n  richTextParagraphs = 2,\n  richTextTableCell = 4,\n  richTextTableRow = 8,\n  richTextTable = 16,\n  plainTextInline = 32,\n  plainTextParagraph = 64,\n  picture = 128,\n  buildingBlockGallery = 256,\n  checkBox = 512,\n  comboBox = 1024,\n  dropDownList = 2048,\n  datePicker = 4096,\n  repeatingSection = 8192,\n  richText = 31,\n  plainText = 96,\n}\n\nasync function insertContentControls() {\n  // Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags.\n  await Word.run(async (context) => {\n    let paragraphs = context.document.body.paragraphs;\n    paragraphs.load(\"$none\"); // Don't need any properties; just wrap each paragraph with a content control.\n\n    await context.sync();\n\n    for (let i = 0; i < paragraphs.items.length; i++) {\n      let contentControl = paragraphs.items[i].insertContentControl();\n      // For even, tag \"even\".\n      if (i % 2 === 0) {\n        contentControl.tag = \"even\";\n      } else {\n        contentControl.tag = \"odd\";\n      }\n    }\n    console.log(\"Content controls inserted: \" + paragraphs.items.length);\n\n    await context.sync();\n  });\n}\n\nasync function modifyContentControls() {\n  // Adds title and colors to odd and even content controls and changes their appearance.\n  await Word.run(async (context) => {\n    // Get the complete sentence (as range) associated with the insertion point.\n    let evenContentControls = context.document.contentControls.getByTag(\"even\");\n    let oddContentControls = context.document.contentControls.getByTag(\"odd\");\n    evenContentControls.load(\"length\");\n    oddContentControls.load(\"length\");\n\n    await context.sync();\n\n    for (let i = 0; i < evenContentControls.items.length; i++) {\n      // Change a few properties and append a paragraph.\n      evenContentControls.items[i].set({\n        color: \"red\",\n        title: \"Odd ContentControl #\" + (i + 1),\n        appearance: Word.ContentControlAppearance.tags\n      });\n      evenContentControls.items[i].insertParagraph(\"This is an odd content control\", \"End\");\n    }\n\n    for (let j = 0; j < oddContentControls.items.length; j++) {\n      // Change a few properties and append a paragraph.\n      oddContentControls.items[j].set({\n        color: \"green\",\n        title: \"Even ContentControl #\" + (j + 1),\n        appearance: \"Tags\"\n      });\n      oddContentControls.items[j].insertHtml(\"This is an <b>even</b> content control\", \"End\");\n    }\n\n    await context.sync();\n  });\n}\n\nlet eventContext;\n\nasync function registerEventHandler() {\n  // Registers the onAdded event handler on the document.\n  await Word.run(async (context) => {\n    eventContext = context.document.onContentControlAdded.add(contentControlAdded);\n    await context.sync();\n\n    console.log(\"Added event handler for when content controls are added.\");\n  });\n}\n\nasync function contentControlAdded(event: Word.ContentControlAddedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. IDs of content controls that were added:`, event.ids);\n  });\n}\n\nasync function insertContentControls() {\n  // Traverses each paragraph of the document and wraps a content control on each.\n  await Word.run(async (context) => {\n    const paragraphs = context.document.body.paragraphs;\n    paragraphs.load(\"$none\"); // Don't need any properties; just wrap each paragraph with a content control.\n\n    await context.sync();\n\n    for (let i = 0; i < paragraphs.items.length; i++) {\n      let contentControl = paragraphs.items[i].insertContentControl();\n      contentControl.tag = \"forTesting\";\n    }\n\n    console.log(\"Content controls inserted: \" + paragraphs.items.length);\n\n    await context.sync();\n  });\n}\n\nasync function deregisterEventHandler() {\n  await Word.run(eventContext.context, async (context) => {\n    eventContext.remove();\n    await context.sync();\n  });\n\n  eventContext = null;\n  console.log(\"Removed event handler that was tracking when content controls are added.\");\n}\n\nlet eventContexts = [];\n\nasync function insertContentControls() {\n  // Traverses each paragraph of the document and wraps a content control on each.\n  await Word.run(async (context) => {\n    const paragraphs = context.document.body.paragraphs;\n    paragraphs.load(\"$none\"); // Don't need any properties; just wrap each paragraph with a content control.\n\n    await context.sync();\n\n    for (let i = 0; i < paragraphs.items.length; i++) {\n      let contentControl = paragraphs.items[i].insertContentControl();\n      contentControl.tag = \"forTesting\";\n    }\n\n    console.log(\"Content controls inserted: \" + paragraphs.items.length);\n\n    await context.sync();\n  });\n}\n\nasync function registerEventHandlers() {\n  await Word.run(async (context) => {\n    const contentControls = context.document.contentControls;\n    contentControls.load(\"items\");\n    await context.sync();\n\n    // Register the onEntered event handler on each content control.\n    if (contentControls.items.length === 0) {\n      console.log(\"There aren't any content controls in this document so can't register event handlers.\");\n    } else {\n      for (let i = 0; i < contentControls.items.length; i++) {\n        eventContexts[5i] = contentControls.items[i].onEntered.add(contentControlEntered);\n        eventContexts[5i+1] = contentControls.items[i].onSelectionChanged.add(contentControlSelectionChanged);\n        eventContexts[5i+2] = contentControls.items[i].onDataChanged.add(contentControlDataChanged);\n        eventContexts[5i+3] = contentControls.items[i].onExited.add(contentControlExited);\n        eventContexts[5i+4] = contentControls.items[i].onDeleted.add(contentControlDeleted);\n        contentControls.items[i].track();\n      }\n\n      await context.sync();\n\n      console.log(\"Added event handlers for when the cursor is placed in content controls.\");\n    }\n  });\n}\n\nasync function contentControlEntered(event: Word.ContentControlEnteredEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. ID of content control that was entered: ${event.ids[0]}`);\n  });\n}\n\nasync function contentControlSelectionChanged(event: Word.ContentControlSelectionChangedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. IDs of content controls where selection was changed:`, event.ids);\n  });\n}\n\nasync function contentControlDataChanged(event: Word.ContentControlDataChangedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. IDs of content controls where data was changed:`, event.ids);\n  });\n}\n\nasync function contentControlExited(event: Word.ContentControlExitedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. ID of content control that was exited: ${event.ids[0]}`);\n  });\n}\n\nasync function contentControlDeleted(event: Word.ContentControlDeletedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. IDs of content controls that were deleted:`, event.ids);\n  });\n}\n\nasync function deregisterEventHandlers() {\n  await Word.run(async (context) => {\n    for (let i = 0; i < eventContexts.length; i++) {\n      await Word.run(eventContexts[i].context, async (context) => {\n        eventContexts[i].remove();\n      });\n    }\n\n    await context.sync();\n\n    eventContexts = [];\n    console.log(\"Removed event handlers that were tracking when the cursor is placed in content controls.\");\n  });\n}"
		}
	]
}